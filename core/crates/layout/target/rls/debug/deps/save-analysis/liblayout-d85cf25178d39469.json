{"config":{"output_file":null,"full_docs":false,"pub_only":false,"reachable_only":false,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/harrisonturton/Documents/dev/wasm-ui/core","program":"/Users/harrisonturton/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":[],"output":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/target/rls/debug/deps/liblayout-d85cf25178d39469.rmeta"},"prelude":{"crate_id":{"name":"layout","disambiguator":[12484112544147554291,0]},"crate_root":"crates/layout/src","external_crates":[{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8121778101813075280,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17620493357780722015,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[18161881043014032950,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16830480400437399750,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7722068402736000666,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[1004281680224563355,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[18155916040418436021,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9117696045549818189,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[334768894470426301,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[7725474617005895420,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17357724652728987651,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[9382970206070903742,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[2993262292404423595,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[10596867704632839566,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[16130277864861404901,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[790493182071655123,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[4301512845898432394,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/tree.rs","num":18,"id":{"name":"math","disambiguator":[17973408491824939618,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/tree.rs","num":19,"id":{"name":"bytemuck","disambiguator":[4200173310525360068,0]}},{"file_name":"/Users/harrisonturton/Documents/dev/wasm-ui/core/crates/layout/src/tree.rs","num":20,"id":{"name":"bytemuck_derive","disambiguator":[8069318798244117010,0]}}],"span":{"file_name":"crates/layout/src/lib.rs","byte_start":0,"byte_end":83,"line_start":1,"line_end":7,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":288},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":95,"byte_end":102,"line_start":1,"line_end":1,"column_start":12,"column_end":19},"alias_span":null,"name":"Vector2","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":18,"index":379},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":104,"byte_end":108,"line_start":1,"line_end":1,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":3}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"crates/layout/src/lib.rs","byte_start":47,"byte_end":48,"line_start":4,"line_end":4,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"crates/layout/src/lib.rs","byte_start":81,"byte_end":82,"line_start":7,"line_end":7,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"crates/layout/src/lib.rs","byte_start":0,"byte_end":83,"line_start":1,"line_end":7,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"crates/layout/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"warn(clippy :: all)","span":{"file_name":"crates/layout/src/lib.rs","byte_start":0,"byte_end":21,"line_start":1,"line_end":1,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tree","qualname":"::tree","value":"crates/layout/src/tree.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":28},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":15},{"krate":0,"index":50},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":19}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":11},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":848,"byte_end":854,"line_start":19,"line_end":19,"column_start":11,"column_end":17},"name":"Layout","qualname":"::tree::Layout","value":"Layout<C>","parent":null,"children":[{"krate":0,"index":13}],"decl_id":null,"docs":" This is the essential trait of the box model. It is implemented by all\n components that undergo the box layout process.\n \n The `layout` method is called repeatedly to generate a [LayoutTree]. Each\n tree node is responsible for three things:\n \n 1. Calculating the position of it's children\n 2. Inserting it's children into the [LayoutTree]\n 3. Calculating and returning it's own size to it's parent node\n \n This allows the [LayoutTree] to be generated in one walk down and up the\n tree. It's how we can perform layout in O(2n) time.\n \n This process takes heavy inspiration from the [Flutter render\n pipeline](https://www.youtube.com/watch?v=UUfXWzp0-DU) and the CSS box\n model.\n","sig":null,"attributes":[{"value":"/ This is the essential trait of the box model. It is implemented by all","span":{"file_name":"crates/layout/src/tree.rs","byte_start":112,"byte_end":186,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ components that undergo the box layout process.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":187,"byte_end":238,"line_start":4,"line_end":4,"column_start":1,"column_end":52}},{"value":"/ ","span":{"file_name":"crates/layout/src/tree.rs","byte_start":239,"byte_end":243,"line_start":5,"line_end":5,"column_start":1,"column_end":5}},{"value":"/ The `layout` method is called repeatedly to generate a [LayoutTree]. Each","span":{"file_name":"crates/layout/src/tree.rs","byte_start":244,"byte_end":321,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ tree node is responsible for three things:","span":{"file_name":"crates/layout/src/tree.rs","byte_start":322,"byte_end":368,"line_start":7,"line_end":7,"column_start":1,"column_end":47}},{"value":"/ ","span":{"file_name":"crates/layout/src/tree.rs","byte_start":369,"byte_end":373,"line_start":8,"line_end":8,"column_start":1,"column_end":5}},{"value":"/ 1. Calculating the position of it's children","span":{"file_name":"crates/layout/src/tree.rs","byte_start":374,"byte_end":422,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/ 2. Inserting it's children into the [LayoutTree]","span":{"file_name":"crates/layout/src/tree.rs","byte_start":423,"byte_end":475,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/ 3. Calculating and returning it's own size to it's parent node","span":{"file_name":"crates/layout/src/tree.rs","byte_start":476,"byte_end":542,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ ","span":{"file_name":"crates/layout/src/tree.rs","byte_start":543,"byte_end":547,"line_start":12,"line_end":12,"column_start":1,"column_end":5}},{"value":"/ This allows the [LayoutTree] to be generated in one walk down and up the","span":{"file_name":"crates/layout/src/tree.rs","byte_start":548,"byte_end":624,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ tree. It's how we can perform layout in O(2n) time.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":625,"byte_end":680,"line_start":14,"line_end":14,"column_start":1,"column_end":56}},{"value":"/ ","span":{"file_name":"crates/layout/src/tree.rs","byte_start":681,"byte_end":685,"line_start":15,"line_end":15,"column_start":1,"column_end":5}},{"value":"/ This process takes heavy inspiration from the [Flutter render","span":{"file_name":"crates/layout/src/tree.rs","byte_start":686,"byte_end":751,"line_start":16,"line_end":16,"column_start":1,"column_end":66}},{"value":"/ pipeline](https://www.youtube.com/watch?v=UUfXWzp0-DU) and the CSS box","span":{"file_name":"crates/layout/src/tree.rs","byte_start":752,"byte_end":826,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ model.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":827,"byte_end":837,"line_start":18,"line_end":18,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":12},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":855,"byte_end":856,"line_start":19,"line_end":19,"column_start":18,"column_end":19},"name":"C","qualname":"::tree::Layout::C$HirId { owner: DefId(0:11 ~ layout[ad40]::tree::Layout), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":867,"byte_end":873,"line_start":20,"line_end":20,"column_start":8,"column_end":14},"name":"layout","qualname":"::tree::Layout::layout","value":"pub fn layout(&Self, &mut LayoutTree<C>) -> SizedLayoutBox<C>","parent":{"krate":0,"index":11},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1310,"byte_end":1321,"line_start":29,"line_end":29,"column_start":10,"column_end":21},"name":"LayoutBoxId","qualname":"::tree::LayoutBoxId","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Used to get a [LayoutBox] from a [LayoutTree].\n \n This is required because [LayoutTree] is implemented using a memory arena in\n order to play nice with the borrow-checker. It's easier to pass around a\n copyable value like `usize` than worry about balancing reference lifetimes\n and shared ownership, and it's more efficient than copying [LayoutBox].\n","sig":null,"attributes":[{"value":"/ Used to get a [LayoutBox] from a [LayoutTree].","span":{"file_name":"crates/layout/src/tree.rs","byte_start":932,"byte_end":982,"line_start":23,"line_end":23,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"crates/layout/src/tree.rs","byte_start":983,"byte_end":987,"line_start":24,"line_end":24,"column_start":1,"column_end":5}},{"value":"/ This is required because [LayoutTree] is implemented using a memory arena in","span":{"file_name":"crates/layout/src/tree.rs","byte_start":988,"byte_end":1068,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ order to play nice with the borrow-checker. It's easier to pass around a","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1069,"byte_end":1145,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ copyable value like `usize` than worry about balancing reference lifetimes","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1146,"byte_end":1224,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ and shared ownership, and it's more efficient than copying [LayoutBox].","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1225,"byte_end":1300,"line_start":28,"line_end":28,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":28},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1514,"byte_end":1528,"line_start":34,"line_end":34,"column_start":12,"column_end":26},"name":"SizedLayoutBox","qualname":"::tree::SizedLayoutBox","value":"SizedLayoutBox { size, content, children }","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32}],"decl_id":null,"docs":" An element that has calculated it's own size, but has not been positioned\n by it's parent yet. This is the intermediate step during layout.\n","sig":null,"attributes":[{"value":"/ An element that has calculated it's own size, but has not been positioned","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1332,"byte_end":1409,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ by it's parent yet. This is the intermediate step during layout.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1410,"byte_end":1478,"line_start":32,"line_end":32,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":30},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1542,"byte_end":1546,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"name":"size","qualname":"::tree::SizedLayoutBox::size","value":"math::Vector2","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":31},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1565,"byte_end":1572,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"name":"content","qualname":"::tree::SizedLayoutBox::content","value":"C","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":32},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1585,"byte_end":1593,"line_start":37,"line_end":37,"column_start":9,"column_end":17},"name":"children","qualname":"::tree::SizedLayoutBox::children","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":28},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":29},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1529,"byte_end":1530,"line_start":34,"line_end":34,"column_start":27,"column_end":28},"name":"C","qualname":"::tree::SizedLayoutBox::C$HirId { owner: DefId(0:28 ~ layout[ad40]::tree::SizedLayoutBox), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1488,"byte_end":1493,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"Clone","qualname":"::Clone$HirId { owner: DefId(0:33 ~ layout[ad40]::tree::{impl#2}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":37},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1495,"byte_end":1500,"line_start":33,"line_end":33,"column_start":17,"column_end":22},"name":"Debug","qualname":"::Debug$HirId { owner: DefId(0:36 ~ layout[ad40]::tree::{impl#3}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":39},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1731,"byte_end":1740,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"LayoutBox","qualname":"::tree::LayoutBox","value":"LayoutBox { rect, content, children }","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43}],"decl_id":null,"docs":" An element that has finished layout. It has been been sized and positioned.\n","sig":null,"attributes":[{"value":"/ An element that has finished layout. It has been been sized and positioned.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1616,"byte_end":1695,"line_start":40,"line_end":40,"column_start":1,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":41},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1754,"byte_end":1758,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"name":"rect","qualname":"::tree::LayoutBox::rect","value":"math::Rect","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":42},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1774,"byte_end":1781,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"name":"content","qualname":"::tree::LayoutBox::content","value":"C","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":43},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1794,"byte_end":1802,"line_start":45,"line_end":45,"column_start":9,"column_end":17},"name":"children","qualname":"::tree::LayoutBox::children","value":"std::vec::Vec<usize>","parent":{"krate":0,"index":39},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":40},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1741,"byte_end":1742,"line_start":42,"line_end":42,"column_start":22,"column_end":23},"name":"C","qualname":"::tree::LayoutBox::C$HirId { owner: DefId(0:39 ~ layout[ad40]::tree::LayoutBox), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1705,"byte_end":1710,"line_start":41,"line_end":41,"column_start":10,"column_end":15},"name":"Clone","qualname":"::Clone$HirId { owner: DefId(0:44 ~ layout[ad40]::tree::{impl#4}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1712,"byte_end":1717,"line_start":41,"line_end":41,"column_start":17,"column_end":22},"name":"Debug","qualname":"::Debug$HirId { owner: DefId(0:47 ~ layout[ad40]::tree::{impl#5}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1830,"byte_end":1831,"line_start":48,"line_end":48,"column_start":6,"column_end":7},"name":"C","qualname":"::C$HirId { owner: DefId(0:15 ~ layout[ad40]::tree::{impl#0}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":1073741841},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2007,"byte_end":2012,"line_start":51,"line_end":51,"column_start":26,"column_end":31},"name":"child","qualname":"<LayoutBox<C>>::from_child::child","value":"tree::SizedLayoutBox<C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":536870929},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2033,"byte_end":2036,"line_start":51,"line_end":51,"column_start":52,"column_end":55},"name":"pos","qualname":"<LayoutBox<C>>::from_child::pos","value":"I","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":18},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2004,"byte_end":2005,"line_start":51,"line_end":51,"column_start":23,"column_end":24},"name":"I","qualname":"<LayoutBox<C>>::from_child::I$HirId { owner: DefId(0:17 ~ layout[ad40]::tree::{impl#0}::from_child), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1993,"byte_end":2003,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"from_child","qualname":"<LayoutBox<C>>::from_child","value":"pub fn from_child<I>(SizedLayoutBox<C>, I) -> LayoutBox<C> where\nI: Into<Vector2>","parent":null,"children":[],"decl_id":null,"docs":" Convenience method to turn a [SizedLayoutBox] into a [LayoutBox]. This\n is handy when implementing the [Layout] trait.\n","sig":null,"attributes":[{"value":"/ Convenience method to turn a [SizedLayoutBox] into a [LayoutBox]. This","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1852,"byte_end":1926,"line_start":49,"line_end":49,"column_start":5,"column_end":79}},{"value":"/ is handy when implementing the [Layout] trait.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1931,"byte_end":1981,"line_start":50,"line_end":50,"column_start":5,"column_end":55}}]},{"kind":"Local","id":{"krate":0,"index":3489660945},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2110,"byte_end":2113,"line_start":55,"line_end":55,"column_start":13,"column_end":16},"name":"min","qualname":"min$HirId { owner: DefId(0:17 ~ layout[ad40]::tree::{impl#0}::from_child), local_id: 11 }","value":"math::Vector2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":671088657},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2140,"byte_end":2143,"line_start":56,"line_end":56,"column_start":13,"column_end":16},"name":"max","qualname":"max$HirId { owner: DefId(0:17 ~ layout[ad40]::tree::{impl#0}::from_child), local_id: 20 }","value":"math::Vector2","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2779,"byte_end":2789,"line_start":74,"line_end":74,"column_start":12,"column_end":22},"name":"LayoutTree","qualname":"::tree::LayoutTree","value":"LayoutTree { root, boxes }","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" A tree of [LayoutBox] elements. The position of each [LayoutBox] is relative\n to it's parent.\n \n This is the data structure that is consumed by the render driver to show on\n the screen. It is intended to be generic across different deploy targets.\n \n The tree is implemented as a memory arena to be indexed into using a\n [LayoutBoxId]. This makes it much easier to use with the borrow checker.\n","sig":null,"attributes":[{"value":"/ A tree of [LayoutBox] elements. The position of each [LayoutBox] is relative","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2316,"byte_end":2396,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/ to it's parent.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2397,"byte_end":2416,"line_start":66,"line_end":66,"column_start":1,"column_end":20}},{"value":"/ ","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2417,"byte_end":2421,"line_start":67,"line_end":67,"column_start":1,"column_end":5}},{"value":"/ This is the data structure that is consumed by the render driver to show on","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2422,"byte_end":2501,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/ the screen. It is intended to be generic across different deploy targets.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2502,"byte_end":2579,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ ","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2580,"byte_end":2584,"line_start":70,"line_end":70,"column_start":1,"column_end":5}},{"value":"/ The tree is implemented as a memory arena to be indexed into using a","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2585,"byte_end":2657,"line_start":71,"line_end":71,"column_start":1,"column_end":73}},{"value":"/ [LayoutBoxId]. This makes it much easier to use with the borrow checker.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2658,"byte_end":2734,"line_start":72,"line_end":72,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":52},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2799,"byte_end":2803,"line_start":75,"line_end":75,"column_start":5,"column_end":9},"name":"root","qualname":"::tree::LayoutTree::root","value":"std::option::Option<usize>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":53},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2830,"byte_end":2835,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"name":"boxes","qualname":"::tree::LayoutTree::boxes","value":"std::vec::Vec<tree::LayoutBox<C>>","parent":{"krate":0,"index":50},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":51},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2790,"byte_end":2791,"line_start":74,"line_end":74,"column_start":23,"column_end":24},"name":"C","qualname":"::tree::LayoutTree::C$HirId { owner: DefId(0:50 ~ layout[ad40]::tree::LayoutTree), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":55},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2744,"byte_end":2749,"line_start":73,"line_end":73,"column_start":10,"column_end":15},"name":"Clone","qualname":"::Clone$HirId { owner: DefId(0:54 ~ layout[ad40]::tree::{impl#6}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":58},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2751,"byte_end":2758,"line_start":73,"line_end":73,"column_start":17,"column_end":24},"name":"Default","qualname":"::Default$HirId { owner: DefId(0:57 ~ layout[ad40]::tree::{impl#7}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":61},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2760,"byte_end":2765,"line_start":73,"line_end":73,"column_start":26,"column_end":31},"name":"Debug","qualname":"::Debug$HirId { owner: DefId(0:60 ~ layout[ad40]::tree::{impl#8}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":20},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2864,"byte_end":2865,"line_start":79,"line_end":79,"column_start":6,"column_end":7},"name":"C","qualname":"::C$HirId { owner: DefId(0:19 ~ layout[ad40]::tree::{impl#1}), local_id: 0 }","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2935,"byte_end":2938,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<LayoutTree<C>>::new","value":"pub fn new() -> LayoutTree<C>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty [LayoutTree].\n","sig":null,"attributes":[{"value":"/ Create a new empty [LayoutTree].","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2887,"byte_end":2923,"line_start":80,"line_end":80,"column_start":5,"column_end":41}}]},{"kind":"Local","id":{"krate":0,"index":1073741846},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3210,"byte_end":3214,"line_start":90,"line_end":90,"column_start":26,"column_end":30},"name":"self","qualname":"<LayoutTree<C>>::set_root::self","value":"&mut tree::LayoutTree<C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":536870934},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3216,"byte_end":3220,"line_start":90,"line_end":90,"column_start":32,"column_end":36},"name":"root","qualname":"<LayoutTree<C>>::set_root::root","value":"std::option::Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3196,"byte_end":3204,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"set_root","qualname":"<LayoutTree<C>>::set_root","value":"pub fn set_root(&mut Self, Option<LayoutBoxId>)","parent":null,"children":[],"decl_id":null,"docs":" Set the root of the tree. This assumes that the [LayoutBoxId] provided\n by the caller points to a valid [LayoutBox].\n","sig":null,"attributes":[{"value":"/ Set the root of the tree. This assumes that the [LayoutBoxId] provided","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3057,"byte_end":3131,"line_start":88,"line_end":88,"column_start":5,"column_end":79}},{"value":"/ by the caller points to a valid [LayoutBox].","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3136,"byte_end":3184,"line_start":89,"line_end":89,"column_start":5,"column_end":53}}]},{"kind":"Local","id":{"krate":0,"index":1073741847},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3405,"byte_end":3409,"line_start":96,"line_end":96,"column_start":24,"column_end":28},"name":"self","qualname":"<LayoutTree<C>>::insert::self","value":"&mut tree::LayoutTree<C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":536870935},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3411,"byte_end":3415,"line_start":96,"line_end":96,"column_start":30,"column_end":34},"name":"lbox","qualname":"<LayoutTree<C>>::insert::lbox","value":"tree::LayoutBox<C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3393,"byte_end":3399,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"insert","qualname":"<LayoutTree<C>>::insert","value":"pub fn insert(&mut Self, LayoutBox<C>) -> LayoutBoxId","parent":null,"children":[],"decl_id":null,"docs":" Insert a [LayoutBox] into the tree and get a [LayoutBoxId] to fetch it\n again later.\n","sig":null,"attributes":[{"value":"/ Insert a [LayoutBox] into the tree and get a [LayoutBoxId] to fetch it","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3286,"byte_end":3360,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ again later.","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3365,"byte_end":3381,"line_start":95,"line_end":95,"column_start":5,"column_end":21}}]},{"kind":"Local","id":{"krate":0,"index":1073741848},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3605,"byte_end":3609,"line_start":102,"line_end":102,"column_start":21,"column_end":25},"name":"self","qualname":"<LayoutTree<C>>::get::self","value":"&mut tree::LayoutTree<C>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Local","id":{"krate":0,"index":536870936},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3611,"byte_end":3613,"line_start":102,"line_end":102,"column_start":27,"column_end":29},"name":"id","qualname":"<LayoutTree<C>>::get::id","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"crates/layout/src/tree.rs","byte_start":3596,"byte_end":3599,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"get","qualname":"<LayoutTree<C>>::get","value":"pub fn get(&mut Self, LayoutBoxId) -> Option<&LayoutBox<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the [LayoutBox] indexed by a [LayoutBoxId].\n","sig":null,"attributes":[{"value":"/ Get a reference to the [LayoutBox] indexed by a [LayoutBoxId].","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3518,"byte_end":3584,"line_start":101,"line_end":101,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"crates/layout/src/lib.rs","byte_start":55,"byte_end":62,"line_start":6,"line_end":6,"column_start":5,"column_end":12},"name":"widgets","qualname":"::widgets","value":"crates/layout/src/lib.rs","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1833,"byte_end":1842,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2867,"byte_end":2877,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"crates/layout/src/lib.rs","byte_start":27,"byte_end":31,"line_start":3,"line_end":3,"column_start":5,"column_end":9},"ref_id":{"krate":0,"index":3}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":88,"byte_end":92,"line_start":1,"line_end":1,"column_start":5,"column_end":9},"ref_id":{"krate":18,"index":288}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":88,"byte_end":92,"line_start":1,"line_end":1,"column_start":5,"column_end":9},"ref_id":{"krate":18,"index":379}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":892,"byte_end":902,"line_start":20,"line_end":20,"column_start":33,"column_end":43},"ref_id":{"krate":0,"index":50}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":903,"byte_end":904,"line_start":20,"line_end":20,"column_start":44,"column_end":45},"ref_id":{"krate":0,"index":12}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":910,"byte_end":924,"line_start":20,"line_end":20,"column_start":51,"column_end":65},"ref_id":{"krate":0,"index":28}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":925,"byte_end":926,"line_start":20,"line_end":20,"column_start":66,"column_end":67},"ref_id":{"krate":0,"index":12}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1548,"byte_end":1555,"line_start":35,"line_end":35,"column_start":15,"column_end":22},"ref_id":{"krate":18,"index":288}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1574,"byte_end":1575,"line_start":36,"line_end":36,"column_start":18,"column_end":19},"ref_id":{"krate":0,"index":29}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1595,"byte_end":1598,"line_start":37,"line_end":37,"column_start":19,"column_end":22},"ref_id":{"krate":5,"index":7049}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1599,"byte_end":1610,"line_start":37,"line_end":37,"column_start":23,"column_end":34},"ref_id":{"krate":0,"index":14}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1542,"byte_end":1546,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":30}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1565,"byte_end":1572,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":31}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1585,"byte_end":1593,"line_start":37,"line_end":37,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":32}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1538,"byte_end":1555,"line_start":35,"line_end":35,"column_start":5,"column_end":22},"ref_id":{"krate":0,"index":30}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1561,"byte_end":1575,"line_start":36,"line_end":36,"column_start":5,"column_end":19},"ref_id":{"krate":0,"index":31}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1581,"byte_end":1611,"line_start":37,"line_end":37,"column_start":5,"column_end":35},"ref_id":{"krate":0,"index":32}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1542,"byte_end":1546,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":30}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1565,"byte_end":1572,"line_start":36,"line_end":36,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":31}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1585,"byte_end":1593,"line_start":37,"line_end":37,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":32}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1760,"byte_end":1764,"line_start":43,"line_end":43,"column_start":15,"column_end":19},"ref_id":{"krate":18,"index":379}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1783,"byte_end":1784,"line_start":44,"line_end":44,"column_start":18,"column_end":19},"ref_id":{"krate":0,"index":40}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1804,"byte_end":1807,"line_start":45,"line_end":45,"column_start":19,"column_end":22},"ref_id":{"krate":5,"index":7049}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1808,"byte_end":1819,"line_start":45,"line_end":45,"column_start":23,"column_end":34},"ref_id":{"krate":0,"index":14}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1754,"byte_end":1758,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":41}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1774,"byte_end":1781,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":42}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1794,"byte_end":1802,"line_start":45,"line_end":45,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":43}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1750,"byte_end":1764,"line_start":43,"line_end":43,"column_start":5,"column_end":19},"ref_id":{"krate":0,"index":41}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1770,"byte_end":1784,"line_start":44,"line_end":44,"column_start":5,"column_end":19},"ref_id":{"krate":0,"index":42}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1790,"byte_end":1820,"line_start":45,"line_end":45,"column_start":5,"column_end":35},"ref_id":{"krate":0,"index":43}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1754,"byte_end":1758,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":41}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1774,"byte_end":1781,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":42}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1794,"byte_end":1802,"line_start":45,"line_end":45,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":43}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1833,"byte_end":1842,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":39}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":1843,"byte_end":1844,"line_start":48,"line_end":48,"column_start":19,"column_end":20},"ref_id":{"krate":0,"index":16}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2078,"byte_end":2082,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"ref_id":{"krate":2,"index":2892}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2083,"byte_end":2090,"line_start":53,"line_end":53,"column_start":17,"column_end":24},"ref_id":{"krate":18,"index":288}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2075,"byte_end":2076,"line_start":53,"line_end":53,"column_start":9,"column_end":10},"ref_id":{"krate":0,"index":18}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2014,"byte_end":2028,"line_start":51,"line_end":51,"column_start":33,"column_end":47},"ref_id":{"krate":0,"index":28}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2029,"byte_end":2030,"line_start":51,"line_end":51,"column_start":48,"column_end":49},"ref_id":{"krate":0,"index":16}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2038,"byte_end":2039,"line_start":51,"line_end":51,"column_start":57,"column_end":58},"ref_id":{"krate":0,"index":18}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2044,"byte_end":2053,"line_start":51,"line_end":51,"column_start":63,"column_end":72},"ref_id":{"krate":0,"index":39}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2054,"byte_end":2055,"line_start":51,"line_end":51,"column_start":73,"column_end":74},"ref_id":{"krate":0,"index":16}},{"kind":"Function","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2120,"byte_end":2124,"line_start":55,"line_end":55,"column_start":23,"column_end":27},"ref_id":{"krate":2,"index":2894}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2116,"byte_end":2119,"line_start":55,"line_end":55,"column_start":19,"column_end":22},"ref_id":{"krate":0,"index":536870929}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2146,"byte_end":2149,"line_start":56,"line_end":56,"column_start":19,"column_end":22},"ref_id":{"krate":0,"index":3489660945}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2152,"byte_end":2157,"line_start":56,"line_end":56,"column_start":25,"column_end":30},"ref_id":{"krate":0,"index":1073741841}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2158,"byte_end":2162,"line_start":56,"line_end":56,"column_start":31,"column_end":35},"ref_id":{"krate":0,"index":30}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2172,"byte_end":2181,"line_start":57,"line_end":57,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":39}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2196,"byte_end":2200,"line_start":58,"line_end":58,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":41}},{"kind":"Function","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2208,"byte_end":2211,"line_start":58,"line_end":58,"column_start":25,"column_end":28},"ref_id":{"krate":18,"index":283}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2202,"byte_end":2206,"line_start":58,"line_end":58,"column_start":19,"column_end":23},"ref_id":{"krate":18,"index":379}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2212,"byte_end":2215,"line_start":58,"line_end":58,"column_start":29,"column_end":32},"ref_id":{"krate":0,"index":3489660945}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2217,"byte_end":2220,"line_start":58,"line_end":58,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":671088657}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2235,"byte_end":2242,"line_start":59,"line_end":59,"column_start":13,"column_end":20},"ref_id":{"krate":0,"index":42}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2244,"byte_end":2249,"line_start":59,"line_end":59,"column_start":22,"column_end":27},"ref_id":{"krate":0,"index":1073741841}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2250,"byte_end":2257,"line_start":59,"line_end":59,"column_start":28,"column_end":35},"ref_id":{"krate":0,"index":31}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2271,"byte_end":2279,"line_start":60,"line_end":60,"column_start":13,"column_end":21},"ref_id":{"krate":0,"index":43}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2281,"byte_end":2286,"line_start":60,"line_end":60,"column_start":23,"column_end":28},"ref_id":{"krate":0,"index":1073741841}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2287,"byte_end":2295,"line_start":60,"line_end":60,"column_start":29,"column_end":37},"ref_id":{"krate":0,"index":32}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2805,"byte_end":2811,"line_start":75,"line_end":75,"column_start":11,"column_end":17},"ref_id":{"krate":2,"index":43186}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2812,"byte_end":2823,"line_start":75,"line_end":75,"column_start":18,"column_end":29},"ref_id":{"krate":0,"index":14}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2837,"byte_end":2840,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"ref_id":{"krate":5,"index":7049}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2841,"byte_end":2850,"line_start":76,"line_end":76,"column_start":16,"column_end":25},"ref_id":{"krate":0,"index":39}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2851,"byte_end":2852,"line_start":76,"line_end":76,"column_start":26,"column_end":27},"ref_id":{"krate":0,"index":51}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2799,"byte_end":2803,"line_start":75,"line_end":75,"column_start":5,"column_end":9},"ref_id":{"krate":0,"index":52}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2830,"byte_end":2835,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"ref_id":{"krate":0,"index":53}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2799,"byte_end":2824,"line_start":75,"line_end":75,"column_start":5,"column_end":30},"ref_id":{"krate":0,"index":52}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2830,"byte_end":2854,"line_start":76,"line_end":76,"column_start":5,"column_end":29},"ref_id":{"krate":0,"index":53}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2799,"byte_end":2824,"line_start":75,"line_end":75,"column_start":5,"column_end":30},"ref_id":{"krate":0,"index":52}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2830,"byte_end":2854,"line_start":76,"line_end":76,"column_start":5,"column_end":29},"ref_id":{"krate":0,"index":53}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2799,"byte_end":2803,"line_start":75,"line_end":75,"column_start":5,"column_end":9},"ref_id":{"krate":0,"index":52}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2830,"byte_end":2835,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"ref_id":{"krate":0,"index":53}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2867,"byte_end":2877,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":50}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2878,"byte_end":2879,"line_start":79,"line_end":79,"column_start":20,"column_end":21},"ref_id":{"krate":0,"index":20}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2944,"byte_end":2954,"line_start":81,"line_end":81,"column_start":21,"column_end":31},"ref_id":{"krate":0,"index":50}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2955,"byte_end":2956,"line_start":81,"line_end":81,"column_start":32,"column_end":33},"ref_id":{"krate":0,"index":20}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2968,"byte_end":2978,"line_start":82,"line_end":82,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":50}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2993,"byte_end":2997,"line_start":83,"line_end":83,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":52}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":2999,"byte_end":3003,"line_start":83,"line_end":83,"column_start":19,"column_end":23},"ref_id":{"krate":2,"index":43188}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3017,"byte_end":3022,"line_start":84,"line_end":84,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":53}},{"kind":"Function","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3029,"byte_end":3032,"line_start":84,"line_end":84,"column_start":25,"column_end":28},"ref_id":{"krate":5,"index":7056}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3024,"byte_end":3027,"line_start":84,"line_end":84,"column_start":20,"column_end":23},"ref_id":{"krate":5,"index":7049}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3222,"byte_end":3228,"line_start":90,"line_end":90,"column_start":38,"column_end":44},"ref_id":{"krate":2,"index":43186}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3229,"byte_end":3240,"line_start":90,"line_end":90,"column_start":45,"column_end":56},"ref_id":{"krate":0,"index":14}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3265,"byte_end":3269,"line_start":91,"line_end":91,"column_start":21,"column_end":25},"ref_id":{"krate":0,"index":536870934}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3253,"byte_end":3257,"line_start":91,"line_end":91,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1073741846}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3258,"byte_end":3262,"line_start":91,"line_end":91,"column_start":14,"column_end":18},"ref_id":{"krate":0,"index":52}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3417,"byte_end":3426,"line_start":96,"line_end":96,"column_start":36,"column_end":45},"ref_id":{"krate":0,"index":39}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3427,"byte_end":3428,"line_start":96,"line_end":96,"column_start":46,"column_end":47},"ref_id":{"krate":0,"index":20}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3434,"byte_end":3445,"line_start":96,"line_end":96,"column_start":53,"column_end":64},"ref_id":{"krate":0,"index":14}},{"kind":"Function","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3467,"byte_end":3471,"line_start":97,"line_end":97,"column_start":20,"column_end":24},"ref_id":{"krate":5,"index":7120}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3456,"byte_end":3460,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1073741847}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3461,"byte_end":3466,"line_start":97,"line_end":97,"column_start":14,"column_end":19},"ref_id":{"krate":0,"index":53}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3472,"byte_end":3476,"line_start":97,"line_end":97,"column_start":25,"column_end":29},"ref_id":{"krate":0,"index":536870935}},{"kind":"Function","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3498,"byte_end":3501,"line_start":98,"line_end":98,"column_start":20,"column_end":23},"ref_id":{"krate":5,"index":7127}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3487,"byte_end":3491,"line_start":98,"line_end":98,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1073741847}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3492,"byte_end":3497,"line_start":98,"line_end":98,"column_start":14,"column_end":19},"ref_id":{"krate":0,"index":53}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3615,"byte_end":3626,"line_start":102,"line_end":102,"column_start":31,"column_end":42},"ref_id":{"krate":0,"index":14}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3631,"byte_end":3637,"line_start":102,"line_end":102,"column_start":47,"column_end":53},"ref_id":{"krate":2,"index":43186}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3639,"byte_end":3648,"line_start":102,"line_end":102,"column_start":55,"column_end":64},"ref_id":{"krate":0,"index":39}},{"kind":"Type","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3649,"byte_end":3650,"line_start":102,"line_end":102,"column_start":65,"column_end":66},"ref_id":{"krate":0,"index":20}},{"kind":"Function","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3674,"byte_end":3677,"line_start":103,"line_end":103,"column_start":20,"column_end":23},"ref_id":{"krate":2,"index":11170}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3663,"byte_end":3667,"line_start":103,"line_end":103,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1073741848}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3668,"byte_end":3673,"line_start":103,"line_end":103,"column_start":14,"column_end":19},"ref_id":{"krate":0,"index":53}},{"kind":"Variable","span":{"file_name":"crates/layout/src/tree.rs","byte_start":3678,"byte_end":3680,"line_start":103,"line_end":103,"column_start":24,"column_end":26},"ref_id":{"krate":0,"index":536870936}},{"kind":"Mod","span":{"file_name":"crates/layout/src/lib.rs","byte_start":41,"byte_end":45,"line_start":4,"line_end":4,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"crates/layout/src/lib.rs","byte_start":72,"byte_end":79,"line_start":7,"line_end":7,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":26}}],"macro_refs":[],"relations":[{"span":{"file_name":"crates/layout/src/tree.rs","byte_start":1833,"byte_end":1842,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":39},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"crates/layout/src/tree.rs","byte_start":2867,"byte_end":2877,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}}]}